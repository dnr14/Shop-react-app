import { useCallback, useReducer } from "react";
import * as boardsApi from "axios/api/boards";


const BOARDS_LOADING = "BOARDS_LOADING";
const BOARDS_SUCCESS = "BOARDS_SUCCESS";
const BOARDS_ERROR = "BOARDS_ERROR";
const BOARDS_ADD = "BOARDS_ADD";

const initialState = {
  loading: false,
  boards: null,
  error: null,
};

const loadingAction = () => ({ type: BOARDS_LOADING });
const successAction = (boards) => ({ type: BOARDS_SUCCESS, data: boards });
const errorAction = error => ({ type: BOARDS_ERROR, error });
const addAction = boards => ({ type: BOARDS_ADD, data: boards });

const boardsReducer = (state, action) => {
  switch (action.type) {
    case BOARDS_LOADING:
      return {
        ...state,
        loading: true,
        error: null
      }
    case BOARDS_SUCCESS:
      return {
        loading: false,
        boards: action.data,
        error: null
      }
    case BOARDS_ERROR:
      return {
        ...state,
        loading: false,
        error: action.error
      }
    case BOARDS_ADD:
      console.log(state, action);

      return {
        loading: false,
        error: null,
        boards: [...state.boards, ...action.data]
      }
    default:
      throw new Error("게시판 리듀스 액션이없습니다.")
  }

}

const useBoardsAsync = () => {
  const [state, dispatch] = useReducer(boardsReducer, initialState);

  const getBoards = useCallback(async () => {
    console.log("요청");
    dispatch(loadingAction());
    try {
      const response = await boardsApi.getBoards();
      if (response) {
        dispatch(successAction(response.data.boards));
        return response.data.boards;
      }
    } catch (error) {
      dispatch(errorAction(error));
    }
  }, []);

  const getMore = useCallback(async (boardsId) => {
    console.log("요청");
    dispatch(loadingAction());
    try {
      const response = await boardsApi.getMore(boardsId);
      console.log("response====>", response);
      if (response) {
        dispatch(addAction(response.data.boards));
        return response.data.boards;
      }
    } catch (error) {
      dispatch(errorAction(error));
    }
  }, []);

  const add = useCallback((boards) => {
    dispatch(addAction(boards));
  }, [])


  return [state, { getBoards, getMore, add }]
};

export default useBoardsAsync;